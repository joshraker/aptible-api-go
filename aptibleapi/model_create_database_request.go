/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the CreateDatabaseRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDatabaseRequest{}

// CreateDatabaseRequest struct for CreateDatabaseRequest
type CreateDatabaseRequest struct {
	Handle string `json:"handle"`
	Type string `json:"type"`
	InitialDiskSize *int32 `json:"initial_disk_size,omitempty"`
	InitialContainerSize *int32 `json:"initial_container_size,omitempty"`
	InitializeFrom *string `json:"initialize_from,omitempty"`
	// Alternate name for `database_image_id`
	DatabaseImage *int32 `json:"database_image,omitempty"`
	DatabaseImageId *int32 `json:"database_image_id,omitempty"`
	CurrentKmsArn *int32 `json:"current_kms_arn,omitempty"`
	EnableBackups *bool `json:"enable_backups,omitempty"`
	EnablePitr *bool `json:"enable_pitr,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CreateDatabaseRequest CreateDatabaseRequest

// NewCreateDatabaseRequest instantiates a new CreateDatabaseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDatabaseRequest(handle string, type_ string) *CreateDatabaseRequest {
	this := CreateDatabaseRequest{}
	this.Handle = handle
	this.Type = type_
	return &this
}

// NewCreateDatabaseRequestWithDefaults instantiates a new CreateDatabaseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDatabaseRequestWithDefaults() *CreateDatabaseRequest {
	this := CreateDatabaseRequest{}
	return &this
}

// GetHandle returns the Handle field value
func (o *CreateDatabaseRequest) GetHandle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Handle
}

// GetHandleOk returns a tuple with the Handle field value
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequest) GetHandleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Handle, true
}

// SetHandle sets field value
func (o *CreateDatabaseRequest) SetHandle(v string) {
	o.Handle = v
}

// GetType returns the Type field value
func (o *CreateDatabaseRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequest) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateDatabaseRequest) SetType(v string) {
	o.Type = v
}

// GetInitialDiskSize returns the InitialDiskSize field value if set, zero value otherwise.
func (o *CreateDatabaseRequest) GetInitialDiskSize() int32 {
	if o == nil || IsNil(o.InitialDiskSize) {
		var ret int32
		return ret
	}
	return *o.InitialDiskSize
}

// GetInitialDiskSizeOk returns a tuple with the InitialDiskSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequest) GetInitialDiskSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.InitialDiskSize) {
		return nil, false
	}
	return o.InitialDiskSize, true
}

// HasInitialDiskSize returns a boolean if a field has been set.
func (o *CreateDatabaseRequest) HasInitialDiskSize() bool {
	if o != nil && !IsNil(o.InitialDiskSize) {
		return true
	}

	return false
}

// SetInitialDiskSize gets a reference to the given int32 and assigns it to the InitialDiskSize field.
func (o *CreateDatabaseRequest) SetInitialDiskSize(v int32) {
	o.InitialDiskSize = &v
}

// GetInitialContainerSize returns the InitialContainerSize field value if set, zero value otherwise.
func (o *CreateDatabaseRequest) GetInitialContainerSize() int32 {
	if o == nil || IsNil(o.InitialContainerSize) {
		var ret int32
		return ret
	}
	return *o.InitialContainerSize
}

// GetInitialContainerSizeOk returns a tuple with the InitialContainerSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequest) GetInitialContainerSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.InitialContainerSize) {
		return nil, false
	}
	return o.InitialContainerSize, true
}

// HasInitialContainerSize returns a boolean if a field has been set.
func (o *CreateDatabaseRequest) HasInitialContainerSize() bool {
	if o != nil && !IsNil(o.InitialContainerSize) {
		return true
	}

	return false
}

// SetInitialContainerSize gets a reference to the given int32 and assigns it to the InitialContainerSize field.
func (o *CreateDatabaseRequest) SetInitialContainerSize(v int32) {
	o.InitialContainerSize = &v
}

// GetInitializeFrom returns the InitializeFrom field value if set, zero value otherwise.
func (o *CreateDatabaseRequest) GetInitializeFrom() string {
	if o == nil || IsNil(o.InitializeFrom) {
		var ret string
		return ret
	}
	return *o.InitializeFrom
}

// GetInitializeFromOk returns a tuple with the InitializeFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequest) GetInitializeFromOk() (*string, bool) {
	if o == nil || IsNil(o.InitializeFrom) {
		return nil, false
	}
	return o.InitializeFrom, true
}

// HasInitializeFrom returns a boolean if a field has been set.
func (o *CreateDatabaseRequest) HasInitializeFrom() bool {
	if o != nil && !IsNil(o.InitializeFrom) {
		return true
	}

	return false
}

// SetInitializeFrom gets a reference to the given string and assigns it to the InitializeFrom field.
func (o *CreateDatabaseRequest) SetInitializeFrom(v string) {
	o.InitializeFrom = &v
}

// GetDatabaseImage returns the DatabaseImage field value if set, zero value otherwise.
func (o *CreateDatabaseRequest) GetDatabaseImage() int32 {
	if o == nil || IsNil(o.DatabaseImage) {
		var ret int32
		return ret
	}
	return *o.DatabaseImage
}

// GetDatabaseImageOk returns a tuple with the DatabaseImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequest) GetDatabaseImageOk() (*int32, bool) {
	if o == nil || IsNil(o.DatabaseImage) {
		return nil, false
	}
	return o.DatabaseImage, true
}

// HasDatabaseImage returns a boolean if a field has been set.
func (o *CreateDatabaseRequest) HasDatabaseImage() bool {
	if o != nil && !IsNil(o.DatabaseImage) {
		return true
	}

	return false
}

// SetDatabaseImage gets a reference to the given int32 and assigns it to the DatabaseImage field.
func (o *CreateDatabaseRequest) SetDatabaseImage(v int32) {
	o.DatabaseImage = &v
}

// GetDatabaseImageId returns the DatabaseImageId field value if set, zero value otherwise.
func (o *CreateDatabaseRequest) GetDatabaseImageId() int32 {
	if o == nil || IsNil(o.DatabaseImageId) {
		var ret int32
		return ret
	}
	return *o.DatabaseImageId
}

// GetDatabaseImageIdOk returns a tuple with the DatabaseImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequest) GetDatabaseImageIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DatabaseImageId) {
		return nil, false
	}
	return o.DatabaseImageId, true
}

// HasDatabaseImageId returns a boolean if a field has been set.
func (o *CreateDatabaseRequest) HasDatabaseImageId() bool {
	if o != nil && !IsNil(o.DatabaseImageId) {
		return true
	}

	return false
}

// SetDatabaseImageId gets a reference to the given int32 and assigns it to the DatabaseImageId field.
func (o *CreateDatabaseRequest) SetDatabaseImageId(v int32) {
	o.DatabaseImageId = &v
}

// GetCurrentKmsArn returns the CurrentKmsArn field value if set, zero value otherwise.
func (o *CreateDatabaseRequest) GetCurrentKmsArn() int32 {
	if o == nil || IsNil(o.CurrentKmsArn) {
		var ret int32
		return ret
	}
	return *o.CurrentKmsArn
}

// GetCurrentKmsArnOk returns a tuple with the CurrentKmsArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequest) GetCurrentKmsArnOk() (*int32, bool) {
	if o == nil || IsNil(o.CurrentKmsArn) {
		return nil, false
	}
	return o.CurrentKmsArn, true
}

// HasCurrentKmsArn returns a boolean if a field has been set.
func (o *CreateDatabaseRequest) HasCurrentKmsArn() bool {
	if o != nil && !IsNil(o.CurrentKmsArn) {
		return true
	}

	return false
}

// SetCurrentKmsArn gets a reference to the given int32 and assigns it to the CurrentKmsArn field.
func (o *CreateDatabaseRequest) SetCurrentKmsArn(v int32) {
	o.CurrentKmsArn = &v
}

// GetEnableBackups returns the EnableBackups field value if set, zero value otherwise.
func (o *CreateDatabaseRequest) GetEnableBackups() bool {
	if o == nil || IsNil(o.EnableBackups) {
		var ret bool
		return ret
	}
	return *o.EnableBackups
}

// GetEnableBackupsOk returns a tuple with the EnableBackups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequest) GetEnableBackupsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableBackups) {
		return nil, false
	}
	return o.EnableBackups, true
}

// HasEnableBackups returns a boolean if a field has been set.
func (o *CreateDatabaseRequest) HasEnableBackups() bool {
	if o != nil && !IsNil(o.EnableBackups) {
		return true
	}

	return false
}

// SetEnableBackups gets a reference to the given bool and assigns it to the EnableBackups field.
func (o *CreateDatabaseRequest) SetEnableBackups(v bool) {
	o.EnableBackups = &v
}

// GetEnablePitr returns the EnablePitr field value if set, zero value otherwise.
func (o *CreateDatabaseRequest) GetEnablePitr() bool {
	if o == nil || IsNil(o.EnablePitr) {
		var ret bool
		return ret
	}
	return *o.EnablePitr
}

// GetEnablePitrOk returns a tuple with the EnablePitr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabaseRequest) GetEnablePitrOk() (*bool, bool) {
	if o == nil || IsNil(o.EnablePitr) {
		return nil, false
	}
	return o.EnablePitr, true
}

// HasEnablePitr returns a boolean if a field has been set.
func (o *CreateDatabaseRequest) HasEnablePitr() bool {
	if o != nil && !IsNil(o.EnablePitr) {
		return true
	}

	return false
}

// SetEnablePitr gets a reference to the given bool and assigns it to the EnablePitr field.
func (o *CreateDatabaseRequest) SetEnablePitr(v bool) {
	o.EnablePitr = &v
}

func (o CreateDatabaseRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDatabaseRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["handle"] = o.Handle
	toSerialize["type"] = o.Type
	if !IsNil(o.InitialDiskSize) {
		toSerialize["initial_disk_size"] = o.InitialDiskSize
	}
	if !IsNil(o.InitialContainerSize) {
		toSerialize["initial_container_size"] = o.InitialContainerSize
	}
	if !IsNil(o.InitializeFrom) {
		toSerialize["initialize_from"] = o.InitializeFrom
	}
	if !IsNil(o.DatabaseImage) {
		toSerialize["database_image"] = o.DatabaseImage
	}
	if !IsNil(o.DatabaseImageId) {
		toSerialize["database_image_id"] = o.DatabaseImageId
	}
	if !IsNil(o.CurrentKmsArn) {
		toSerialize["current_kms_arn"] = o.CurrentKmsArn
	}
	if !IsNil(o.EnableBackups) {
		toSerialize["enable_backups"] = o.EnableBackups
	}
	if !IsNil(o.EnablePitr) {
		toSerialize["enable_pitr"] = o.EnablePitr
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CreateDatabaseRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"handle",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateDatabaseRequest := _CreateDatabaseRequest{}

	err = json.Unmarshal(data, &varCreateDatabaseRequest)

	if err != nil {
		return err
	}

	*o = CreateDatabaseRequest(varCreateDatabaseRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "handle")
		delete(additionalProperties, "type")
		delete(additionalProperties, "initial_disk_size")
		delete(additionalProperties, "initial_container_size")
		delete(additionalProperties, "initialize_from")
		delete(additionalProperties, "database_image")
		delete(additionalProperties, "database_image_id")
		delete(additionalProperties, "current_kms_arn")
		delete(additionalProperties, "enable_backups")
		delete(additionalProperties, "enable_pitr")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCreateDatabaseRequest struct {
	value *CreateDatabaseRequest
	isSet bool
}

func (v NullableCreateDatabaseRequest) Get() *CreateDatabaseRequest {
	return v.value
}

func (v *NullableCreateDatabaseRequest) Set(val *CreateDatabaseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDatabaseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDatabaseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDatabaseRequest(val *CreateDatabaseRequest) *NullableCreateDatabaseRequest {
	return &NullableCreateDatabaseRequest{value: val, isSet: true}
}

func (v NullableCreateDatabaseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDatabaseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


