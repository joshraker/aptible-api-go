/*
Deploy API v1

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package aptibleapi

import (
	"encoding/json"
	"fmt"
)

// checks if the Database type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Database{}

// Database struct for Database
type Database struct {
	Id int32 `json:"id"`
	Handle string `json:"handle"`
	Type NullableString `json:"type"`
	Passphrase NullableString `json:"passphrase"`
	ConnectionUrl NullableString `json:"connection_url"`
	Provisioned bool `json:"provisioned"`
	MetaType string `json:"_type"`
	CreatedAt string `json:"created_at"`
	UpdatedAt string `json:"updated_at"`
	Status string `json:"status"`
	DockerRepo NullableString `json:"docker_repo"`
	PortMapping [][]int32 `json:"port_mapping"`
	InitialDiskSize NullableInt32 `json:"initial_disk_size"`
	InitialContainerSize NullableInt32 `json:"initial_container_size"`
	CurrentKmsArn NullableString `json:"current_kms_arn"`
	EnableBackups bool `json:"enable_backups"`
	PitrBucket NullableString `json:"pitr_bucket"`
	OldestPitrTime NullableString `json:"oldest_pitr_time"`
	EnablePitr bool `json:"enable_pitr"`
	Embedded DatabaseEmbedded `json:"_embedded"`
	Links *DatabaseLinks `json:"_links,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Database Database

// NewDatabase instantiates a new Database object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabase(id int32, handle string, type_ NullableString, passphrase NullableString, connectionUrl NullableString, provisioned bool, metaType string, createdAt string, updatedAt string, status string, dockerRepo NullableString, portMapping [][]int32, initialDiskSize NullableInt32, initialContainerSize NullableInt32, currentKmsArn NullableString, enableBackups bool, pitrBucket NullableString, oldestPitrTime NullableString, enablePitr bool, embedded DatabaseEmbedded) *Database {
	this := Database{}
	this.Id = id
	this.Handle = handle
	this.Type = type_
	this.Passphrase = passphrase
	this.ConnectionUrl = connectionUrl
	this.Provisioned = provisioned
	this.MetaType = metaType
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Status = status
	this.DockerRepo = dockerRepo
	this.PortMapping = portMapping
	this.InitialDiskSize = initialDiskSize
	this.InitialContainerSize = initialContainerSize
	this.CurrentKmsArn = currentKmsArn
	this.EnableBackups = enableBackups
	this.PitrBucket = pitrBucket
	this.OldestPitrTime = oldestPitrTime
	this.EnablePitr = enablePitr
	this.Embedded = embedded
	return &this
}

// NewDatabaseWithDefaults instantiates a new Database object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseWithDefaults() *Database {
	this := Database{}
	return &this
}

// GetId returns the Id field value
func (o *Database) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Database) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Database) SetId(v int32) {
	o.Id = v
}

// GetHandle returns the Handle field value
func (o *Database) GetHandle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Handle
}

// GetHandleOk returns a tuple with the Handle field value
// and a boolean to check if the value has been set.
func (o *Database) GetHandleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Handle, true
}

// SetHandle sets field value
func (o *Database) SetHandle(v string) {
	o.Handle = v
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Database) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Database) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *Database) SetType(v string) {
	o.Type.Set(&v)
}

// GetPassphrase returns the Passphrase field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Database) GetPassphrase() string {
	if o == nil || o.Passphrase.Get() == nil {
		var ret string
		return ret
	}

	return *o.Passphrase.Get()
}

// GetPassphraseOk returns a tuple with the Passphrase field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Database) GetPassphraseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Passphrase.Get(), o.Passphrase.IsSet()
}

// SetPassphrase sets field value
func (o *Database) SetPassphrase(v string) {
	o.Passphrase.Set(&v)
}

// GetConnectionUrl returns the ConnectionUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Database) GetConnectionUrl() string {
	if o == nil || o.ConnectionUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.ConnectionUrl.Get()
}

// GetConnectionUrlOk returns a tuple with the ConnectionUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Database) GetConnectionUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionUrl.Get(), o.ConnectionUrl.IsSet()
}

// SetConnectionUrl sets field value
func (o *Database) SetConnectionUrl(v string) {
	o.ConnectionUrl.Set(&v)
}

// GetProvisioned returns the Provisioned field value
func (o *Database) GetProvisioned() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Provisioned
}

// GetProvisionedOk returns a tuple with the Provisioned field value
// and a boolean to check if the value has been set.
func (o *Database) GetProvisionedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provisioned, true
}

// SetProvisioned sets field value
func (o *Database) SetProvisioned(v bool) {
	o.Provisioned = v
}

// GetMetaType returns the MetaType field value
func (o *Database) GetMetaType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetaType
}

// GetMetaTypeOk returns a tuple with the MetaType field value
// and a boolean to check if the value has been set.
func (o *Database) GetMetaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetaType, true
}

// SetMetaType sets field value
func (o *Database) SetMetaType(v string) {
	o.MetaType = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Database) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Database) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Database) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Database) GetUpdatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Database) GetUpdatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Database) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetStatus returns the Status field value
func (o *Database) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Database) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Database) SetStatus(v string) {
	o.Status = v
}

// GetDockerRepo returns the DockerRepo field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Database) GetDockerRepo() string {
	if o == nil || o.DockerRepo.Get() == nil {
		var ret string
		return ret
	}

	return *o.DockerRepo.Get()
}

// GetDockerRepoOk returns a tuple with the DockerRepo field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Database) GetDockerRepoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DockerRepo.Get(), o.DockerRepo.IsSet()
}

// SetDockerRepo sets field value
func (o *Database) SetDockerRepo(v string) {
	o.DockerRepo.Set(&v)
}

// GetPortMapping returns the PortMapping field value
func (o *Database) GetPortMapping() [][]int32 {
	if o == nil {
		var ret [][]int32
		return ret
	}

	return o.PortMapping
}

// GetPortMappingOk returns a tuple with the PortMapping field value
// and a boolean to check if the value has been set.
func (o *Database) GetPortMappingOk() ([][]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PortMapping, true
}

// SetPortMapping sets field value
func (o *Database) SetPortMapping(v [][]int32) {
	o.PortMapping = v
}

// GetInitialDiskSize returns the InitialDiskSize field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Database) GetInitialDiskSize() int32 {
	if o == nil || o.InitialDiskSize.Get() == nil {
		var ret int32
		return ret
	}

	return *o.InitialDiskSize.Get()
}

// GetInitialDiskSizeOk returns a tuple with the InitialDiskSize field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Database) GetInitialDiskSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.InitialDiskSize.Get(), o.InitialDiskSize.IsSet()
}

// SetInitialDiskSize sets field value
func (o *Database) SetInitialDiskSize(v int32) {
	o.InitialDiskSize.Set(&v)
}

// GetInitialContainerSize returns the InitialContainerSize field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Database) GetInitialContainerSize() int32 {
	if o == nil || o.InitialContainerSize.Get() == nil {
		var ret int32
		return ret
	}

	return *o.InitialContainerSize.Get()
}

// GetInitialContainerSizeOk returns a tuple with the InitialContainerSize field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Database) GetInitialContainerSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.InitialContainerSize.Get(), o.InitialContainerSize.IsSet()
}

// SetInitialContainerSize sets field value
func (o *Database) SetInitialContainerSize(v int32) {
	o.InitialContainerSize.Set(&v)
}

// GetCurrentKmsArn returns the CurrentKmsArn field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Database) GetCurrentKmsArn() string {
	if o == nil || o.CurrentKmsArn.Get() == nil {
		var ret string
		return ret
	}

	return *o.CurrentKmsArn.Get()
}

// GetCurrentKmsArnOk returns a tuple with the CurrentKmsArn field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Database) GetCurrentKmsArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentKmsArn.Get(), o.CurrentKmsArn.IsSet()
}

// SetCurrentKmsArn sets field value
func (o *Database) SetCurrentKmsArn(v string) {
	o.CurrentKmsArn.Set(&v)
}

// GetEnableBackups returns the EnableBackups field value
func (o *Database) GetEnableBackups() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnableBackups
}

// GetEnableBackupsOk returns a tuple with the EnableBackups field value
// and a boolean to check if the value has been set.
func (o *Database) GetEnableBackupsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnableBackups, true
}

// SetEnableBackups sets field value
func (o *Database) SetEnableBackups(v bool) {
	o.EnableBackups = v
}

// GetPitrBucket returns the PitrBucket field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Database) GetPitrBucket() string {
	if o == nil || o.PitrBucket.Get() == nil {
		var ret string
		return ret
	}

	return *o.PitrBucket.Get()
}

// GetPitrBucketOk returns a tuple with the PitrBucket field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Database) GetPitrBucketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PitrBucket.Get(), o.PitrBucket.IsSet()
}

// SetPitrBucket sets field value
func (o *Database) SetPitrBucket(v string) {
	o.PitrBucket.Set(&v)
}

// GetOldestPitrTime returns the OldestPitrTime field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Database) GetOldestPitrTime() string {
	if o == nil || o.OldestPitrTime.Get() == nil {
		var ret string
		return ret
	}

	return *o.OldestPitrTime.Get()
}

// GetOldestPitrTimeOk returns a tuple with the OldestPitrTime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Database) GetOldestPitrTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OldestPitrTime.Get(), o.OldestPitrTime.IsSet()
}

// SetOldestPitrTime sets field value
func (o *Database) SetOldestPitrTime(v string) {
	o.OldestPitrTime.Set(&v)
}

// GetEnablePitr returns the EnablePitr field value
func (o *Database) GetEnablePitr() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.EnablePitr
}

// GetEnablePitrOk returns a tuple with the EnablePitr field value
// and a boolean to check if the value has been set.
func (o *Database) GetEnablePitrOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnablePitr, true
}

// SetEnablePitr sets field value
func (o *Database) SetEnablePitr(v bool) {
	o.EnablePitr = v
}

// GetEmbedded returns the Embedded field value
func (o *Database) GetEmbedded() DatabaseEmbedded {
	if o == nil {
		var ret DatabaseEmbedded
		return ret
	}

	return o.Embedded
}

// GetEmbeddedOk returns a tuple with the Embedded field value
// and a boolean to check if the value has been set.
func (o *Database) GetEmbeddedOk() (*DatabaseEmbedded, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Embedded, true
}

// SetEmbedded sets field value
func (o *Database) SetEmbedded(v DatabaseEmbedded) {
	o.Embedded = v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Database) GetLinks() DatabaseLinks {
	if o == nil || IsNil(o.Links) {
		var ret DatabaseLinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Database) GetLinksOk() (*DatabaseLinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Database) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given DatabaseLinks and assigns it to the Links field.
func (o *Database) SetLinks(v DatabaseLinks) {
	o.Links = &v
}

func (o Database) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Database) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["handle"] = o.Handle
	toSerialize["type"] = o.Type.Get()
	toSerialize["passphrase"] = o.Passphrase.Get()
	toSerialize["connection_url"] = o.ConnectionUrl.Get()
	toSerialize["provisioned"] = o.Provisioned
	toSerialize["_type"] = o.MetaType
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["status"] = o.Status
	toSerialize["docker_repo"] = o.DockerRepo.Get()
	toSerialize["port_mapping"] = o.PortMapping
	toSerialize["initial_disk_size"] = o.InitialDiskSize.Get()
	toSerialize["initial_container_size"] = o.InitialContainerSize.Get()
	toSerialize["current_kms_arn"] = o.CurrentKmsArn.Get()
	toSerialize["enable_backups"] = o.EnableBackups
	toSerialize["pitr_bucket"] = o.PitrBucket.Get()
	toSerialize["oldest_pitr_time"] = o.OldestPitrTime.Get()
	toSerialize["enable_pitr"] = o.EnablePitr
	toSerialize["_embedded"] = o.Embedded
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Database) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"handle",
		"type",
		"passphrase",
		"connection_url",
		"provisioned",
		"_type",
		"created_at",
		"updated_at",
		"status",
		"docker_repo",
		"port_mapping",
		"initial_disk_size",
		"initial_container_size",
		"current_kms_arn",
		"enable_backups",
		"pitr_bucket",
		"oldest_pitr_time",
		"enable_pitr",
		"_embedded",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDatabase := _Database{}

	err = json.Unmarshal(data, &varDatabase)

	if err != nil {
		return err
	}

	*o = Database(varDatabase)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "handle")
		delete(additionalProperties, "type")
		delete(additionalProperties, "passphrase")
		delete(additionalProperties, "connection_url")
		delete(additionalProperties, "provisioned")
		delete(additionalProperties, "_type")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "status")
		delete(additionalProperties, "docker_repo")
		delete(additionalProperties, "port_mapping")
		delete(additionalProperties, "initial_disk_size")
		delete(additionalProperties, "initial_container_size")
		delete(additionalProperties, "current_kms_arn")
		delete(additionalProperties, "enable_backups")
		delete(additionalProperties, "pitr_bucket")
		delete(additionalProperties, "oldest_pitr_time")
		delete(additionalProperties, "enable_pitr")
		delete(additionalProperties, "_embedded")
		delete(additionalProperties, "_links")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDatabase struct {
	value *Database
	isSet bool
}

func (v NullableDatabase) Get() *Database {
	return v.value
}

func (v *NullableDatabase) Set(val *Database) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabase) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabase(val *Database) *NullableDatabase {
	return &NullableDatabase{value: val, isSet: true}
}

func (v NullableDatabase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


